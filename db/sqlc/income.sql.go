// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: income.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createIncome = `-- name: CreateIncome :one
INSERT INTO income (
    category_id, account_id, amount, date
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, category_id, account_id, amount, date
`

type CreateIncomeParams struct {
	CategoryID sql.NullInt32 `json:"category_id"`
	AccountID  sql.NullInt32 `json:"account_id"`
	Amount     float32       `json:"amount"`
	Date       time.Time     `json:"date"`
}

func (q *Queries) CreateIncome(ctx context.Context, arg CreateIncomeParams) (Income, error) {
	row := q.db.QueryRowContext(ctx, createIncome,
		arg.CategoryID,
		arg.AccountID,
		arg.Amount,
		arg.Date,
	)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.AccountID,
		&i.Amount,
		&i.Date,
	)
	return i, err
}

const deleteIncome = `-- name: DeleteIncome :exec
DELETE FROM income
WHERE id = $1
`

func (q *Queries) DeleteIncome(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteIncome, id)
	return err
}

const getTotalIncomeByAccountAndDate = `-- name: GetTotalIncomeByAccountAndDate :one
SELECT SUM(amount) FROM income
WHERE account_id = $1
AND date BETWEEN $2 AND $3
`

type GetTotalIncomeByAccountAndDateParams struct {
	AccountID sql.NullInt32 `json:"account_id"`
	StartDate time.Time     `json:"start_date"`
	EndDate   time.Time     `json:"end_date"`
}

func (q *Queries) GetTotalIncomeByAccountAndDate(ctx context.Context, arg GetTotalIncomeByAccountAndDateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalIncomeByAccountAndDate, arg.AccountID, arg.StartDate, arg.EndDate)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const listIncomeByAccountAndDate = `-- name: ListIncomeByAccountAndDate :many
SELECT id, category_id, account_id, amount, date FROM income 
WHERE account_id = $1
AND date BETWEEN $4 AND $5
ORDER BY date DESC
LIMIT $2
OFFSET $3
`

type ListIncomeByAccountAndDateParams struct {
	AccountID sql.NullInt32 `json:"account_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
	StartDate time.Time     `json:"start_date"`
	EndDate   time.Time     `json:"end_date"`
}

func (q *Queries) ListIncomeByAccountAndDate(ctx context.Context, arg ListIncomeByAccountAndDateParams) ([]Income, error) {
	rows, err := q.db.QueryContext(ctx, listIncomeByAccountAndDate,
		arg.AccountID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Income
	for rows.Next() {
		var i Income
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.AccountID,
			&i.Amount,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIncome = `-- name: UpdateIncome :one
UPDATE income
SET category_id = $1, amount = $2
WHERE id = $3
RETURNING id, category_id, account_id, amount, date
`

type UpdateIncomeParams struct {
	CategoryID sql.NullInt32 `json:"category_id"`
	Amount     float32       `json:"amount"`
	ID         int32         `json:"id"`
}

func (q *Queries) UpdateIncome(ctx context.Context, arg UpdateIncomeParams) (Income, error) {
	row := q.db.QueryRowContext(ctx, updateIncome, arg.CategoryID, arg.Amount, arg.ID)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.AccountID,
		&i.Amount,
		&i.Date,
	)
	return i, err
}
