// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: expense_categories.sql

package db

import (
	"context"
)

const createExpenseCategory = `-- name: CreateExpenseCategory :one
INSERT INTO expense_categories (
    name, color
) VALUES (
    $1, $2
) RETURNING id, name, color
`

type CreateExpenseCategoryParams struct {
	Name  string `json:"name"`
	Color string `json:"color"`
}

func (q *Queries) CreateExpenseCategory(ctx context.Context, arg CreateExpenseCategoryParams) (ExpenseCategories, error) {
	row := q.db.QueryRowContext(ctx, createExpenseCategory, arg.Name, arg.Color)
	var i ExpenseCategories
	err := row.Scan(&i.ID, &i.Name, &i.Color)
	return i, err
}

const deleteExpenseCategory = `-- name: DeleteExpenseCategory :exec
DELETE FROM expense_categories
WHERE id = $1
`

func (q *Queries) DeleteExpenseCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExpenseCategory, id)
	return err
}

const getExpenseCategory = `-- name: GetExpenseCategory :one
SELECT id, name, color FROM expense_categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpenseCategory(ctx context.Context, id int32) (ExpenseCategories, error) {
	row := q.db.QueryRowContext(ctx, getExpenseCategory, id)
	var i ExpenseCategories
	err := row.Scan(&i.ID, &i.Name, &i.Color)
	return i, err
}

const listExpenseCategories = `-- name: ListExpenseCategories :many
SELECT id, name, color FROM expense_categories
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListExpenseCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExpenseCategories(ctx context.Context, arg ListExpenseCategoriesParams) ([]ExpenseCategories, error) {
	rows, err := q.db.QueryContext(ctx, listExpenseCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExpenseCategories{}
	for rows.Next() {
		var i ExpenseCategories
		if err := rows.Scan(&i.ID, &i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpenseCategoryColor = `-- name: UpdateExpenseCategoryColor :one
UPDATE expense_categories
SET color = $1
WHERE id = $2
RETURNING id, name, color
`

type UpdateExpenseCategoryColorParams struct {
	Color string `json:"color"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateExpenseCategoryColor(ctx context.Context, arg UpdateExpenseCategoryColorParams) (ExpenseCategories, error) {
	row := q.db.QueryRowContext(ctx, updateExpenseCategoryColor, arg.Color, arg.ID)
	var i ExpenseCategories
	err := row.Scan(&i.ID, &i.Name, &i.Color)
	return i, err
}

const updateExpenseCategoryName = `-- name: UpdateExpenseCategoryName :one
UPDATE expense_categories
SET name = $1
WHERE id = $2
RETURNING id, name, color
`

type UpdateExpenseCategoryNameParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateExpenseCategoryName(ctx context.Context, arg UpdateExpenseCategoryNameParams) (ExpenseCategories, error) {
	row := q.db.QueryRowContext(ctx, updateExpenseCategoryName, arg.Name, arg.ID)
	var i ExpenseCategories
	err := row.Scan(&i.ID, &i.Name, &i.Color)
	return i, err
}
